/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2>;
        };

        quote {
            bindings = <&kp APOSTROPHE>;
            key-positions = <21 22>;
        };

        capsword {
            bindings = <&caps_word>;
            key-positions = <13 22>;
        };

        nextbt {
            bindings = <&bt BT_NXT>;
            key-positions = <9 10>;
        };
    };

    behaviors {
        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 41 40>;
            hold-trigger-on-release;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 38 37 36>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
        };
    };

    macros {
        meh: meh {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>;
            label = "MEH";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q          &kp W         &kp E        &kp R        &kp T      &kp Y        &kp U            &kp I        &mt LG(O) O   &kp P                  &none
&none  &hml LSHIFT A  &hml LCTRL S  &hml LALT D  &hml LGUI F  &kp G      &kp H        &hmr LGUI J      &hmr LALT K  &hmr LCTRL L  &hmr LSHIFT SEMICOLON  &none
&none  &kp Z          &mt LG(X) X   &mt LG(C) C  &mt LG(V) V  &kp B      &kp N        &kp M            &kp COMMA    &kp DOT       &kp FSLH               &none
                                    &lt 4 ESC    &lt 3 SPACE  &kp TAB    &lt 2 ENTER  &lt 1 BACKSPACE  &kp DEL
            >;
        };

        num {
            bindings = <
&trans  &kp LEFT_BRACKET  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp RIGHT_BRACKET    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp COLON         &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp EQUAL            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp GRAVE         &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp BACKSLASH        &trans  &trans  &trans  &trans  &trans  &trans
                                        &trans        &kp NUMBER_0  &kp MINUS            &trans  &trans  &trans
            >;
        };

        sym {
            bindings = <
&trans  &kp LEFT_BRACE  &kp AMPERSAND    &kp ASTERISK          &kp LEFT_PARENTHESIS   &kp RIGHT_BRACE    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans          &kp DOLLAR       &kp PERCENT           &kp CARET              &kp PLUS           &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp TILDE       &kp EXCLAMATION  &kp AT_SIGN           &kp HASH               &kp PIPE           &trans  &trans  &trans  &trans  &trans  &trans
                                         &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp UNDERSCORE     &trans  &trans  &trans
            >;
        };

        nav {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans    &trans    &trans  &trans     &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans    &trans    &trans  &trans     &trans
                        &trans  &trans  &trans    &trans  &trans    &trans
            >;
        };

        media {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans            &trans             &trans           &trans      &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp K_PREV        &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp K_NEXT  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans            &trans             &trans           &trans      &trans
                        &trans  &trans  &trans    &trans  &kp K_PLAY_PAUSE  &trans
            >;
        };
    };
};
